/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pose.classification;

import org.bson.Document;
import java.util.Map;
import java.util.ArrayList;

import java.util.Collections;
import java.util.Properties;
import java.time.Duration;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import org.apache.commons.lang3.StringUtils;
import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.common.serialization.StringDeserializer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

public class App {
    private static final Info info = new Info();
    private static final String FIN_MESSAGE = "exit";
    
    public static void main(String[] args) {
        //Consumer Config 추가, Key-Value 형태로 전달
        //Bootstrap-server, Serializer, Group_id_config 등
        Properties properties = new Properties();
        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, info.kafka1);
        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "latest");
        properties.put(ConsumerConfig.GROUP_ID_CONFIG, "Fire-Detection");
        

        //Consumer 객체 생성
        KafkaConsumer<String,String> consumer = new KafkaConsumer<String,String>(properties);

        //Topic 구독
        consumer.subscribe(Collections.singletonList(info.topicname));

        //Mongo 객체 생성
        // MongoClient mongoClient = MongoClients.create(info.url);

        //Mongo Config 추가
        // MongoDatabase database = mongoClient.getDatabase(info.database);
        // MongoCollection<Document> collection = database.getCollection(info.collection);

        //메세지를 받을 객체
        String message = null;

        //jackson objectmapper 객체 생성
        ObjectMapper objectMapper = new ObjectMapper();

        //Consumer, Mongo 실행부
        try{
            do{//consumer로 받아온 message를 Records 객체에 저장, Records 객체는 Iterable 하다
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));

                // Records 가 없는 경우, Consumer와 연결은 되어 있음
                if(records.isEmpty()== true) {
                    System.out.println("ConsumerRecords is Empty");
                }


                //Records 에서 Record를 하나씩 꺼내 message로 변환하고 출력
                for(ConsumerRecord<String, String> record : records) {
                    message = record.value();
                    
                    //JSON String -> Map
                    Map<String,Object> jsonMap = objectMapper.readValue(message, new TypeReference<Map<String,Object>>(){});
                    // Map<String,Object> poseClassificationModule = (Map<String,Object>) jsonMap.get("poseClassificationModule");
                    // ArrayList<Object> classificationInfo = (ArrayList<Object>) poseClassificationModule.get("classificationInfo");

                    // if(classificationInfo.size() == 0) {
                    //     System.out.println("No information detected");
                    // }
                    // else {
                    //     Document doc = Document.parse(message);
                    //     if(true){
                    //         System.out.println("This Code is Detecting Json Object");
                    //     }
                    //     // collection.insertOne(doc);
                       
                    // }
                    System.out.println(message);
                
                }
            }while (!StringUtils.equals(message, FIN_MESSAGE));
        } catch(Exception e){
            // exception
        } finally {
            consumer.close();
        }
    }
}
